//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FairfaxCounty.JCAS_Public_MVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JcasEntities : DbContext
    {
        public JcasEntities()
            : base("name=JcasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<JcasAttorney> JcasAttorneys { get; set; }
        public virtual DbSet<JcasAttorneyHearingType> JcasAttorneyHearingTypes { get; set; }
        public virtual DbSet<JcasCourtClosed> JcasCourtCloseds { get; set; }
        public virtual DbSet<JcasCourtroom> JcasCourtrooms { get; set; }
        public virtual DbSet<JcasDateType> JcasDateTypes { get; set; }
        public virtual DbSet<JcasDescription> JcasDescriptions { get; set; }
        public virtual DbSet<JcasHearingType> JcasHearingTypes { get; set; }
        public virtual DbSet<JcasHoliday> JcasHolidays { get; set; }
        public virtual DbSet<JcasLog> JcasLogs { get; set; }
        public virtual DbSet<JcasMessage> JcasMessages { get; set; }
        public virtual DbSet<JcasRule> JcasRules { get; set; }
        public virtual DbSet<JcasSession> JcasSessions { get; set; }
        public virtual DbSet<JcasSetting> JcasSettings { get; set; }
        public virtual DbSet<JcasUser> JcasUsers { get; set; }
        public virtual DbSet<JcasReport> JcasReports { get; set; }
        public virtual DbSet<JcasCourtDateNote> JcasCourtDateNotes { get; set; }
        public virtual DbSet<JcasSessionRequest> JcasSessionRequests { get; set; }
    
        public virtual int pJcasAttorneyUpdate(Nullable<int> id, string lastName, string firstName, string middleName, string barNumber, string emailAddress, string phoneNumber, string lawFirmName, Nullable<bool> isActive, string attorneyHearingTypes, string userLoginIdUpdate, byte[] rowVersionId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var barNumberParameter = barNumber != null ?
                new ObjectParameter("BarNumber", barNumber) :
                new ObjectParameter("BarNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var lawFirmNameParameter = lawFirmName != null ?
                new ObjectParameter("LawFirmName", lawFirmName) :
                new ObjectParameter("LawFirmName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var attorneyHearingTypesParameter = attorneyHearingTypes != null ?
                new ObjectParameter("AttorneyHearingTypes", attorneyHearingTypes) :
                new ObjectParameter("AttorneyHearingTypes", typeof(string));
    
            var userLoginIdUpdateParameter = userLoginIdUpdate != null ?
                new ObjectParameter("UserLoginIdUpdate", userLoginIdUpdate) :
                new ObjectParameter("UserLoginIdUpdate", typeof(string));
    
            var rowVersionIdParameter = rowVersionId != null ?
                new ObjectParameter("RowVersionId", rowVersionId) :
                new ObjectParameter("RowVersionId", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pJcasAttorneyUpdate", idParameter, lastNameParameter, firstNameParameter, middleNameParameter, barNumberParameter, emailAddressParameter, phoneNumberParameter, lawFirmNameParameter, isActiveParameter, attorneyHearingTypesParameter, userLoginIdUpdateParameter, rowVersionIdParameter);
        }
    
        public virtual int pJcasHolidayInsertNextYear(string userLoginIdUpdate)
        {
            var userLoginIdUpdateParameter = userLoginIdUpdate != null ?
                new ObjectParameter("UserLoginIdUpdate", userLoginIdUpdate) :
                new ObjectParameter("UserLoginIdUpdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pJcasHolidayInsertNextYear", userLoginIdUpdateParameter);
        }
    
        public virtual int pJcasSessionInsertNextYear(string userLoginIdUpdate)
        {
            var userLoginIdUpdateParameter = userLoginIdUpdate != null ?
                new ObjectParameter("UserLoginIdUpdate", userLoginIdUpdate) :
                new ObjectParameter("UserLoginIdUpdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pJcasSessionInsertNextYear", userLoginIdUpdateParameter);
        }
    
        public virtual ObjectResult<pJcasSessionGetCalendar_Result4> pJcasSessionGetCalendar(Nullable<int> attorneyId, Nullable<System.DateTime> sessionMonth)
        {
            var attorneyIdParameter = attorneyId.HasValue ?
                new ObjectParameter("AttorneyId", attorneyId) :
                new ObjectParameter("AttorneyId", typeof(int));
    
            var sessionMonthParameter = sessionMonth.HasValue ?
                new ObjectParameter("SessionMonth", sessionMonth) :
                new ObjectParameter("SessionMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pJcasSessionGetCalendar_Result4>("pJcasSessionGetCalendar", attorneyIdParameter, sessionMonthParameter);
        }
    
        public virtual int rAttorneyCalendar(Nullable<int> attorneyId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter reportHtml)
        {
            var attorneyIdParameter = attorneyId.HasValue ?
                new ObjectParameter("AttorneyId", attorneyId) :
                new ObjectParameter("AttorneyId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rAttorneyCalendar", attorneyIdParameter, fromDateParameter, toDateParameter, reportHtml);
        }
    
        public virtual int rAttorneySchedule(Nullable<int> attorneyId, ObjectParameter reportHtml)
        {
            var attorneyIdParameter = attorneyId.HasValue ?
                new ObjectParameter("AttorneyId", attorneyId) :
                new ObjectParameter("AttorneyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rAttorneySchedule", attorneyIdParameter, reportHtml);
        }
    
        public virtual int rCourtCalendar(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter reportHtml)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rCourtCalendar", fromDateParameter, toDateParameter, reportHtml);
        }
    }
}
